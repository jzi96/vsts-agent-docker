apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: my-vsts-agent
    name: my-vsts-agent
    namespace: myagentns
  spec:
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: my-vsts-agent
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: my-vsts-agent
      spec:
        containers:
        - env:
          - name: DOTNET_USE_POLLING_FILE_WATCHER
            value: "true"
          - name: VSTS_ACCOUNT
            valueFrom:
              secretKeyRef:
                key: VSTS_ACCOUNT
                name: vsts
          - name: VSTS_TOKEN
            valueFrom:
              secretKeyRef:
                key: VSTS_TOKEN
                name: vsts
          - name: VSTS_POOL
            value: my-devops-pool
          - name: VSTS_WORK
            value: /tmp/vsts/$VSTS_AGENT
          image: index.docker.io/janzi/vsts-build-agents:ubuntu-18.04-docker-standard
          imagePullPolicy: IfNotPresent
          name: my-vsts-agent
          resources:
            limits:
              cpu: "4"
              memory: 6192Mi
            requests:
              cpu: 100m
              memory: 512Mi
          volumeMounts:
          - mountPath: /var/run/docker.sock
            name: docker-volume
        restartPolicy: Always
        terminationGracePeriodSeconds: 60
        volumes:
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: docker-volume
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-vsts-agent-restart
  namespace: myagentns
  labels:
    app: my-vsts-agent
    release: my-vsts-agent
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-vsts-agent-restart
  namespace: myagentns
  labels:
    app: my-vsts-agent
    release: my-vsts-agent
rules:
  - apiGroups: ["apps", "extensions"]
    resources: ["deployments"]
    resourceNames: [my-vsts-agent]
    verbs: ["get", "patch", "list", "watch"] # "list" and "watch" are only needed
                                             # if you want to use `rollout status`
---
# bind the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-vsts-agent-restart
  namespace: myagentns
  labels:
    app: my-vsts-agent
    release: my-vsts-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-vsts-agent-restart
subjects:
  - kind: ServiceAccount
    name: my-vsts-agent-restart
---
#scale down up 05:00
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: my-vsts-agent-scaleup
  namespace: myagentns
  labels:
    app: my-vsts-agent
    release: my-vsts-agent
spec:
  concurrencyPolicy: Forbid
  schedule: '0 5 * * MON,TUE,WED,THU,FRI' # scale at 5 UTC
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 600
      template:
        spec:
          serviceAccountName: my-vsts-agent-restart
          restartPolicy: Never
          containers:
            - name: kubectl
              image: bitnami/kubectl
              command:
                - 'kubectl'
                - 'scale'
                - 'deployment'
                - 'my-vsts-agent'
                - '--replicas=3'
---
#scale down at 20:00
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: my-vsts-agent-scaleto0
  namespace: myagentns
  labels:
    app: my-vsts-agent
    release: my-vsts-agent
spec:
  concurrencyPolicy: Forbid
  schedule: '0 20 * * MON,TUE,WED,THU,FRI' # scale at 5 UTC
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 600
      template:
        spec:
          serviceAccountName: my-vsts-agent-restart
          restartPolicy: Never
          containers:
            - name: kubectl
              image: bitnami/kubectl
              command:
                - 'kubectl'
                - 'scale'
                - 'deployment'
                - 'my-vsts-agent'
                - '--replicas=0'
---
#restart after 2 min at 20.:02
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: my-vsts-agent-sacelenight
  namespace: myagentns
  labels:
    app: my-vsts-agent
    release: my-vsts-agent
spec:
  concurrencyPolicy: Forbid
  schedule: '2 20 * * MON,TUE,WED,THU,FRI' # scale at 5 UTC
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 600
      template:
        spec:
          serviceAccountName: my-vsts-agent-restart
          restartPolicy: Never
          containers:
            - name: kubectl
              image: bitnami/kubectl
              command:
                - 'kubectl'
                - 'scale'
                - 'deployment'
                - 'my-vsts-agent'
                - '--replicas=1'

#kubectl create secret vsts
#kubectl create secret generic vsts --from-literal=VSTS_TOKEN=<PAT> --from-literal=VSTS_ACCOUNT=<my-account>